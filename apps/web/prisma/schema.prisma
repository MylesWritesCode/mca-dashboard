datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  username        String?   @unique
  password        String
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdBy       User?     @relation("createdBy", fields: [userId], references: [id])
  accountsCreated User[]    @relation("createdBy")
  userId          String?

  OrganizationUsers OrganizationUsers[]
  @@map("Users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model Organization {
  id         String   @id @default(cuid())
  name       String   @unique
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  OrganizationUsers OrganizationUsers[]
  Client            Client[]
  @@map("Organizations")
}

model OrganizationUsers {
  userId         String
  organizationId String
  organizations  Organization @relation(fields: [organizationId], references: [id])
  users          User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model Client {
  id             String   @id @default(cuid())
  name           String   @unique
  organizationId String
  createdAt      DateTime @default(now())
  modifiedAt     DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  @@map("Clients")
}
