datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  username       String?      @unique
  password       String
  email          String?      @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdById    String?      @map("created_by_id")
  createdBy      User?        @relation("created_by", fields: [createdById], references: [id])
  usersCreated   User[]       @relation("created_by")
  roleId         String?
  role           Role?        @relation(fields: [roleId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  modifiedAt     DateTime     @updatedAt @map("modified_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id         String   @id @default(cuid())
  name       String   @unique
  clients    Client[]
  roles      Role[]
  users      User[]
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  @@map("organizations")
}

model Role {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  users          User[]

  @@unique([name, organizationId])
  @@map("roles")
}

model Client {
  id             String       @id @default(cuid())
  name           String       @unique
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now()) @map("created_at")
  modifiedAt     DateTime     @updatedAt @map("modified_at")

  @@map("clients")
}
